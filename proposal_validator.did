type Account = record { owner : principal; subaccount : opt blob };
type Account_1 = record { owner : opt principal; subaccount : opt Subaccount };
type Action = variant {
  ManageNervousSystemParameters : NervousSystemParameters;
  AddGenericNervousSystemFunction : NervousSystemFunction;
  ManageDappCanisterSettings : ManageDappCanisterSettings;
  RemoveGenericNervousSystemFunction : nat64;
  UpgradeSnsToNextVersion : record {};
  RegisterDappCanisters : RegisterDappCanisters;
  TransferSnsTreasuryFunds : TransferSnsTreasuryFunds;
  UpgradeSnsControlledCanister : UpgradeSnsControlledCanister;
  DeregisterDappCanisters : DeregisterDappCanisters;
  MintSnsTokens : MintSnsTokens;
  AdvanceSnsTargetVersion : AdvanceSnsTargetVersion;
  Unspecified : record {};
  ManageSnsMetadata : ManageSnsMetadata;
  ExecuteGenericNervousSystemFunction : ExecuteGenericNervousSystemFunction;
  ManageLedgerParameters : ManageLedgerParameters;
  Motion : Motion;
};
type AddNeuronPermissions = record {
  permissions_to_add : opt NeuronPermissionList;
  principal_id : opt principal;
};
type AdvanceSnsTargetVersion = record { new_target : opt SnsVersion };
type Amount = record { e8s : nat64 };
type By = variant {
  MemoAndController : MemoAndController;
  NeuronId : record {};
};
type ChangeAutoStakeMaturity = record {
  requested_setting_for_auto_stake_maturity : bool;
};
type ChunkedCanisterWasm = record {
  wasm_module_hash : blob;
  chunk_hashes_list : vec blob;
  store_canister_id : opt principal;
};
type ClaimOrRefresh = record { by : opt By };
type Command = variant {
  Split : Split;
  Follow : Follow;
  DisburseMaturity : DisburseMaturity;
  ClaimOrRefresh : ClaimOrRefresh;
  Configure : Configure;
  RegisterVote : RegisterVote;
  MakeProposal : Proposal;
  StakeMaturity : StakeMaturity;
  RemoveNeuronPermissions : RemoveNeuronPermissions;
  AddNeuronPermissions : AddNeuronPermissions;
  MergeMaturity : MergeMaturity;
  Disburse : Disburse;
};
type Configure = record { operation : opt Operation };
type DefaultFollowees = record { followees : vec record { nat64; Followees } };
type DeregisterDappCanisters = record {
  canister_ids : vec principal;
  new_controllers : vec principal;
};
type Disburse = record { to_account : opt Account_1; amount : opt Amount };
type DisburseMaturity = record {
  to_account : opt Account_1;
  percentage_to_disburse : nat32;
};
type ExecuteGenericNervousSystemFunction = record {
  function_id : nat64;
  payload : blob;
};
type Follow = record { function_id : nat64; followees : vec NeuronId };
type Followees = record { followees : vec NeuronId };
type FunctionType = variant {
  NativeNervousSystemFunction : record {};
  GenericNervousSystemFunction : GenericNervousSystemFunction;
};
type GenericNervousSystemFunction = record {
  topic : opt Topic;
  validator_canister_id : opt principal;
  target_canister_id : opt principal;
  validator_method_name : opt text;
  target_method_name : opt text;
};
type IncreaseDissolveDelay = record {
  additional_dissolve_delay_seconds : nat32;
};
type ManageDappCanisterSettings = record {
  freezing_threshold : opt nat64;
  wasm_memory_threshold : opt nat64;
  canister_ids : vec principal;
  reserved_cycles_limit : opt nat64;
  log_visibility : opt int32;
  wasm_memory_limit : opt nat64;
  memory_allocation : opt nat64;
  compute_allocation : opt nat64;
};
type ManageLedgerParameters = record {
  token_symbol : opt text;
  transfer_fee : opt nat64;
  token_logo : opt text;
  token_name : opt text;
};
type ManageNeuron = record { subaccount : blob; command : opt Command };
type ManageSnsMetadata = record {
  url : opt text;
  logo : opt text;
  name : opt text;
  description : opt text;
};
type MemoAndController = record { controller : opt principal; memo : nat64 };
type MergeMaturity = record { percentage_to_merge : nat32 };
type MintSnsTokens = record {
  to_principal : opt principal;
  to_subaccount : opt Subaccount;
  memo : opt nat64;
  amount_e8s : opt nat64;
};
type Motion = record { motion_text : text };
type NervousSystemFunction = record {
  id : nat64;
  name : text;
  description : opt text;
  function_type : opt FunctionType;
};
type NervousSystemParameters = record {
  default_followees : opt DefaultFollowees;
  max_dissolve_delay_seconds : opt nat64;
  max_dissolve_delay_bonus_percentage : opt nat64;
  max_followees_per_function : opt nat64;
  automatically_advance_target_version : opt bool;
  neuron_claimer_permissions : opt NeuronPermissionList;
  neuron_minimum_stake_e8s : opt nat64;
  max_neuron_age_for_age_bonus : opt nat64;
  initial_voting_period_seconds : opt nat64;
  neuron_minimum_dissolve_delay_to_vote_seconds : opt nat64;
  reject_cost_e8s : opt nat64;
  max_proposals_to_keep_per_action : opt nat32;
  wait_for_quiet_deadline_increase_seconds : opt nat64;
  max_number_of_neurons : opt nat64;
  transaction_fee_e8s : opt nat64;
  max_number_of_proposals_with_ballots : opt nat64;
  max_age_bonus_percentage : opt nat64;
  neuron_grantable_permissions : opt NeuronPermissionList;
  voting_rewards_parameters : opt VotingRewardsParameters;
  maturity_modulation_disabled : opt bool;
  max_number_of_principals_per_neuron : opt nat64;
};
type NeuronId = record { id : blob };
type NeuronPermissionList = record { permissions : vec int32 };
type Operation = variant {
  ChangeAutoStakeMaturity : ChangeAutoStakeMaturity;
  StopDissolving : record {};
  StartDissolving : record {};
  IncreaseDissolveDelay : IncreaseDissolveDelay;
  SetDissolveTimestamp : SetDissolveTimestamp;
};
type Proposal = record {
  url : text;
  title : text;
  action : opt Action;
  summary : text;
};
type ProposalId = record { id : nat64 };
type RegisterDappCanisters = record { canister_ids : vec principal };
type RegisterVote = record { vote : int32; proposal : opt ProposalId };
type RemoveNeuronPermissions = record {
  permissions_to_remove : opt NeuronPermissionList;
  principal_id : opt principal;
};
type Result = variant { Ok : text; Err : text };
type SetDissolveTimestamp = record { dissolve_timestamp_seconds : nat64 };
type SnsVersion = record {
  archive_wasm_hash : opt blob;
  root_wasm_hash : opt blob;
  swap_wasm_hash : opt blob;
  ledger_wasm_hash : opt blob;
  governance_wasm_hash : opt blob;
  index_wasm_hash : opt blob;
};
type Split = record { memo : nat64; amount_e8s : nat64 };
type StakeMaturity = record { percentage_to_stake : opt nat32 };
type Subaccount = record { subaccount : blob };
type Topic = variant {
  DappCanisterManagement;
  DaoCommunitySettings;
  ApplicationBusinessLogic;
  CriticalDappOperations;
  TreasuryAssetManagement;
  Governance;
  SnsFrameworkManagement;
};
type TransferArg = record {
  to : Account;
  fee : opt nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type TransferSnsTreasuryFunds = record {
  from_treasury : int32;
  to_principal : opt principal;
  to_subaccount : opt Subaccount;
  memo : opt nat64;
  amount_e8s : nat64;
};
type UpgradeSnsControlledCanister = record {
  new_canister_wasm : blob;
  mode : opt int32;
  canister_id : opt principal;
  chunked_canister_wasm : opt ChunkedCanisterWasm;
  canister_upgrade_arg : opt blob;
};
type VotingRewardsParameters = record {
  final_reward_rate_basis_points : opt nat64;
  initial_reward_rate_basis_points : opt nat64;
  reward_rate_transition_duration_seconds : opt nat64;
  round_duration_seconds : opt nat64;
};
service : {
  __get_candid_interface_tmp_hack : () -> (text) query;
  icts_description : () -> (text) query;
  icts_name : () -> (text) query;
  icts_version : () -> (text) query;
  validate_icrc1_transfer : (TransferArg) -> (Result) query;
  validate_manage_neuron : (ManageNeuron) -> (Result) query;
}